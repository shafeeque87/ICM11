// =============================================================================
// File: WarehousePOFactory.java
// Generated by JGen Code Generator from INTERSHOP Communications AG.
// Generator template: ORMFactory.xpt(checksum: 6e6bf2256972a853c83260dcdcdafcb3)
// =============================================================================
// The JGen Code Generator software is the property of INTERSHOP Communications AG. 
// Any rights to use are granted under the license agreement. 
// =============================================================================
package com.intershop.component.warehouse.internal;

import java.util.Collections;
import java.util.Enumeration;

import com.intershop.beehive.core.capi.common.Factory;
import com.intershop.beehive.core.capi.common.FinderException;
import com.intershop.beehive.core.capi.domain.Domain;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.orm.capi.common.CacheMode;
import com.intershop.beehive.orm.capi.common.FindMode;
import com.intershop.beehive.orm.capi.common.ORMObjectCollection;
import com.intershop.beehive.orm.capi.description.ClassDescription;
import com.intershop.beehive.orm.capi.engine.ORMEngine;

/**
 * This class provides life cycle management methods for the class WarehousePO.
 *
 * @see com.intershop.training.component.warehouse.internal.WarehousePO
 * @generated
 */
public class WarehousePOFactory extends Factory
{
    /**
     * The name which can be used to lookup a factory from the naming manager.
     * 
     * @deprecated use "NamingMgr.getInstance().lookupFactory(WarehousePO.class)" instead
     * @generated
     */
    @Deprecated
    public static final String FACTORY_NAME = "com.intershop.training.component.warehouse.internal.WarehousePO";

    /**
     * The constructor.
     *
     * @generated
     */
    public WarehousePOFactory(ORMEngine engine, ClassDescription classDescription)
    {
        super(engine, classDescription);

        WarehousePO.nameAttribute = classDescription.getAttributeDescription("name");
        WarehousePO.locationAttribute = classDescription.getAttributeDescription("location");
        WarehousePO.capacityAttribute = classDescription.getAttributeDescription("capacity");

        WarehousePO.stockItemPOsRelation = classDescription.getRelationDescription("stockItemPOs");
        WarehousePO.attributeValuePOsRelation = classDescription.getRelationDescription("attributeValuePOs");

    }

    /**
     * Creates a new instance of class WarehousePO.
     *
     * @return the new instance of class WarehousePO
     * @generated modifiable
     */
    public WarehousePO create(String UUID, String domainID, String name)
    {

        WarehousePOKey key = new WarehousePOKey(UUID);
        WarehousePO instance = (WarehousePO)getEngine().getPersistenceManager()
                        .createObject(key, getClassDescription());

        instance.setAttributeValue(WarehousePO.domainIDAttribute, domainID);
        instance.setAttributeValue(WarehousePO.nameAttribute, name);

        // {{ create
        // put your custom create code here
        // }} create

        return instance;
    }

    /**
     * Creates a new instance of class WarehousePO.
     *
     * @return the new instance of class WarehousePO
     * @generated
     */
    public WarehousePO create(Domain domain, String name)
    {
        return create(UUIDMgr.getInstance()
                        .createUUIDString(), domain.getUUID(), name);
    }

    /**
     * Removes an object by its primary key.
     *
     * @generated
     */
    public void remove(WarehousePOKey key)
    {
        WarehousePO object = getObjectByPrimaryKey(key);
        if (object != null)
        {
            object.remove();
        }
    }

    /**
     * Locates an instance of class WarehousePO based on its primary key.
     *
     * @param key the primary key to use for lookup
     * @return the object for the specified primary key
     * @exception com.intershop.beehive.core.capi.common.FinderException if the object wasn't found
     * @deprecated use getObjectByPrimaryKey now
     * @generated
     */
    @Deprecated
    public WarehousePO findByPrimaryKey(WarehousePOKey key) throws FinderException
    {
        return (WarehousePO)super.findByPrimaryKeyObject(key);
    }

    /**
     * Locates an instance of class WarehousePO based on its primary key.
     *
     * @param key the primary key to use for lookup
     * @return the object for the specified primary key or null, if it wasn't found
     * @generated
     */
    public WarehousePO getObjectByPrimaryKey(WarehousePOKey key)
    {
        return (WarehousePO)super.getObjectByPrimaryKeyObject(key);
    }

    /**
     * Locates an instance of class WarehousePO based on its primary key.
     *
     * @param key the primary key to use for lookup
     * @param findMode the strategy to use for the lookup
     * @return the object for the specified primary key
     * @exception com.intershop.beehive.core.capi.common.FinderException if the object wasn't found
     * @deprecated use getObjectByPrimaryKey now
     * @generated
     */
    @Deprecated
    public WarehousePO findByPrimaryKey(WarehousePOKey key, FindMode mode) throws FinderException
    {
        return (WarehousePO)super.findByPrimaryKeyObject(key, mode);
    }

    /**
     * Locates an instance of class WarehousePO based on its primary key.
     *
     * @param key the primary key to use for lookup
     * @param findMode the strategy to use for the lookup
     * @return the object for the specified primary key or null, if it wasn't found
     * @generated
     */
    public WarehousePO getObjectByPrimaryKey(WarehousePOKey key, FindMode mode)
    {
        return (WarehousePO)super.getObjectByPrimaryKeyObject(key, mode);
    }

    /**
     * Locates an instance of class WarehousePO based on its alternate key.
     *
     * @param key the alternate key to use for lookup
     * @return the object for the specified alternate key or null, if it wasn't found
     * @generated
     */
    public WarehousePO getObjectByAlternateKey(WarehousePOAlternateKey key)
    {
        return (WarehousePO)super.getObjectByAlternateKeyObject(key);
    }

    /**
     * Locates an instance of class WarehousePO based on its alternate key.
     *
     * @param key the alternate key to use for lookup
     * @param findMode the strategy to use for the lookup
     * @return the object for the specified alternate key or null, if it wasn't found
     * @generated
     */
    public WarehousePO getObjectByAlternateKey(WarehousePOAlternateKey key, FindMode mode)
    {
        return (WarehousePO)super.getObjectByAlternateKeyObject(key, mode);
    }

    /**
     * Locates instances of class WarehousePO based on the value of the attribute 'domainID'.
     *
     * @param value the value of the attribute 'domainID' to use for lookup
     * @return a list of instances of class WarehousePO that match the specified value of the attribute domainID
     * @deprecated use getObjectsByDomainID() instead
     * @generated
     */
    @Deprecated
    public Enumeration findByDomainID(String value)
    {
        return Collections.enumeration(getObjectsByDomainID(value));
    }

    /**
     * Locates instances of class WarehousePO based on the value of the attribute 'domainID'.
     *
     * @param value the value of the attribute 'domainID' to use for lookup
     * @return a list of instances of class WarehousePO that match the specified value of attribute domainID
     * @generated
     */
    public ORMObjectCollection getObjectsByDomainID(String value)
    {
        return getEngine().getPersistenceManager()
                        .getObjectsByAttribute(value, WarehousePO.domainIDAttribute, getClassDescription());
    }

    /**
     * Locates instances of class WarehousePO based on the value of the attribute 'domainID'.
     *
     * Depending on the passed cache mode, the collection internally caches the result objects or not. If caching is
     * used, all results are cached in the collection and it can be iterated multiple times without repeated queries to
     * the database. If no caching is used, the results will not be cached by the collection. Each call to iterator will
     * execute the query again. This mode should be used when large result sets are expected and caching all results is
     * not possible.
     * 
     * @param value the value of the attribute 'domainID' to use for lookup
     * @param cacheMode the cache mode that specifies how to handle resolved objects
     * @return a list of instances of class WarehousePO that match the specified value of attribute domainID
     * @generated
     */
    public ORMObjectCollection getObjectsByDomainID(String value, CacheMode cacheMode)
    {
        return getEngine().getPersistenceManager()
                        .getObjectsByAttribute(value, WarehousePO.domainIDAttribute, getClassDescription(), cacheMode);
    }

}
