// =============================================================================
// File: WarehousePO.java
// Generated by JGen Code Generator from INTERSHOP Communications AG.
// Generator template: ORMClass.xpt(checksum: 9a846fb10e9c3b98b1a62ea7a508da27)
// =============================================================================
// The JGen Code Generator software is the property of INTERSHOP Communications AG. 
// Any rights to use are granted under the license agreement. 
// =============================================================================
package bc_warehouse_orm;

import com.intershop.beehive.core.capi.domain.AttributeValue;
import com.intershop.beehive.core.capi.domain.ExtensibleObjectPO;
import com.intershop.beehive.core.capi.localization.LocaleInformation;
import com.intershop.beehive.orm.capi.common.ORMObjectFactory;
import com.intershop.beehive.orm.capi.description.AttributeDescription;
import com.intershop.beehive.orm.capi.description.RelationDescription;
import java.util.Collection;
import java.util.Iterator;

/**
 * @generated
 */
public class WarehousePO extends ExtensibleObjectPO
{

    /**
     * @generated
     */
    public static AttributeDescription nameAttribute = null;
    /**
     * @generated
     */
    public static AttributeDescription locationAttribute = null;
    /**
     * @generated
     */
    public static AttributeDescription capacityAttribute = null;

    /**
     * @generated
     */
    public static RelationDescription stockItemPOsRelation = null;
    /**
     * @generated
     */
    public static RelationDescription attributeValuePOsRelation = null;

    /**
     * The constructor.
     *
     * @generated
     */
    public WarehousePO(ORMObjectFactory factory, WarehousePOKey key)
    {
        super(factory, key);
    }

    /**
     * Returns the name of the factory that manages this type of objects. The name can be used to lookup the factory
     * from the NamingMgr.
     *
     * @return the factory name
     * @generated
     */
    public String getFactoryName()
    {
        return getClass().getName();
    }

    /**
     * This hook is called whenever the bean has been modified.
     *
     * @generated modifiable
     */
    public void onChange()
    {
        // {{ bean_onchange
        // put your custom onChange code here
        // }} bean_onchange

        super.onChange();
    }

    /**
     * Returns the value of attribute 'name'.
     * <p>
     *
     * @return the value of the attribute 'name'
     * @generated
     */
    public String getName()
    {
        String value = (String)getAttributeValue(nameAttribute);
        return (value != null) ? value : "";
    }

    /**
     * Sets the value of the attribute 'name'.
     * <p>
     *
     * @param aValue the new value of the attribute
     * @generated
     */
    public void setName(String aValue)
    {

        if (setAttributeValue(nameAttribute, aValue))
        {
            onChange();
        }
    }

    /**
     * Returns the value of attribute 'location'.
     * <p>
     *
     * @return the value of the attribute 'location'
     * @generated
     */
    public String getLocation()
    {
        String value = (String)getAttributeValue(locationAttribute);
        return (value != null) ? value : "";
    }

    /**
     * Sets the value of the attribute 'location'.
     * <p>
     *
     * @param aValue the new value of the attribute
     * @generated
     */
    public void setLocation(String aValue)
    {

        if (setAttributeValue(locationAttribute, aValue))
        {
            onChange();
        }
    }

    /**
     * Checks whether the value of the attribute 'location' is null.
     * <p>
     *
     * @return true if the value of attribute 'location' is null, false otherwise
     * @generated
     */
    public boolean getLocationNull()
    {
        return (getAttributeValue(locationAttribute) == null);
    }

    /**
     * Sets the value of the attribute 'location' to null.
     * <p>
     *
     * @param aFlag meaningless
     * @generated
     */
    public void setLocationNull(boolean aFlag)
    {

        if (setAttributeValue(locationAttribute, null))
        {

            onChange();
        }
    }

    /**
     * Returns the value of attribute 'capacity'.
     * <p>
     *
     * @return the value of the attribute 'capacity'
     * @generated
     */
    public int getCapacity()
    {
        Integer value = (Integer)getAttributeValue(capacityAttribute);
        return (value != null) ? value.intValue() : (int)0;
    }

    /**
     * Sets the value of the attribute 'capacity'.
     * <p>
     *
     * @param aValue the new value of the attribute
     * @generated
     */
    public void setCapacity(int aValue)
    {

        if (setAttributeValue(capacityAttribute, Integer.valueOf(aValue)))
        {
            onChange();
        }
    }

    /**
     * Checks whether the value of the attribute 'capacity' is null.
     * <p>
     *
     * @return true if the value of attribute 'capacity' is null, false otherwise
     * @generated
     */
    public boolean getCapacityNull()
    {
        return (getAttributeValue(capacityAttribute) == null);
    }

    /**
     * Sets the value of the attribute 'capacity' to null.
     * <p>
     *
     * @param aFlag meaningless
     * @generated
     */
    public void setCapacityNull(boolean aFlag)
    {

        if (setAttributeValue(capacityAttribute, null))
        {

            onChange();
        }
    }

    /**
     * Returns the value of the localized extensible object attribute "description" for the current locale.
     * <p>
     *
     * @return the value of the localized extensible object attribute, or null if it wasn't found
     * @generated
     */
    public String getDescription()
    {
        return getString("description");
    }

    /**
     * Returns the value of the localized extensible object attribute "description" for the specified locale.
     * <p>
     *
     * @param aLocale the locale to determine the attribute value
     * @return the value of the localized extensible object attribute, or null if it wasn't found
     * @generated
     */
    public String getDescription(LocaleInformation aLocale)
    {
        return getLocalizedString("description", aLocale);
    }

    /**
     * Sets the value of the localized extensible object attribute "description" for the specified locale.
     * <p>
     *
     * @param aDescription the new value for the extensible object attribute
     * @param aLocale the locale to set the localized attribute value for
     * @generated
     */
    public void setDescription(String aDescription, LocaleInformation aLocale)
    {
        putLocalizedString("description", aDescription, aLocale);

        onChange();
    }

    /**
     * Returns all associated objects via the relation 'stockItemPOs'.
     *
     * @return the enumeration of associated objects
     * @generated
     */
    @SuppressWarnings("unchecked")
    public Collection<StockPO> getStockItemPOs()
    {
        return getRelatedObjects(stockItemPOsRelation);
    }

    /**
     * Checks whether the specified element participates in the relationship.
     * <p>
     *
     * @param anElement the element to check for participation
     * @return true, if the element is part of the relationship, false otherwise
     * @generated
     */
    public boolean isInStockItemPOs(StockPO anElement)
    {
        return getStockItemPOs().contains(anElement);
    }

    /**
     * Determines the number of elements participating in the relationship.
     * <p>
     *
     * @return the number of elements participating in the relation
     * @generated
     */
    public int getStockItemPOsCount()
    {
        return getStockItemPOs().size();
    }

    /**
     * Creates an iterator containing the elements of the relationship.
     * <p>
     *
     * @return the iterator with the elements of the relation
     * @generated
     */
    public Iterator<StockPO> createStockItemPOsIterator()
    {
        return getStockItemPOs().iterator();
    }

    /**
     * Returns all associated objects via the relation 'attributeValuePOs'.
     *
     * @return the enumeration of associated objects
     * @generated
     */
    @SuppressWarnings("unchecked")
    public Collection<WarehousePOAttributeValuePO> getAttributeValuePOs()
    {
        return getRelatedObjects(attributeValuePOsRelation);
    }

    /**
     * Checks whether the specified element participates in the relationship.
     * <p>
     * The attribute values of an extensible object.
     *
     * @param anElement the element to check for participation
     * @return true, if the element is part of the relationship, false otherwise
     * @generated
     */
    public boolean isInAttributeValuePOs(WarehousePOAttributeValuePO anElement)
    {
        return getAttributeValuePOs().contains(anElement);
    }

    /**
     * Determines the number of elements participating in the relationship.
     * <p>
     * The attribute values of an extensible object.
     *
     * @return the number of elements participating in the relation
     * @generated
     */
    public int getAttributeValuePOsCount()
    {
        return getAttributeValuePOs().size();
    }

    /**
     * Creates an iterator containing the elements of the relationship.
     * <p>
     * The attribute values of an extensible object.
     *
     * @return the iterator with the elements of the relation
     * @generated
     */
    public Iterator<WarehousePOAttributeValuePO> createAttributeValuePOsIterator()
    {
        return getAttributeValuePOs().iterator();
    }

    /**
     * Convenience wrapper that implements the public API relation 'attributeValues'. The implementation just forwards
     * the call to the internal relation implementation 'attributeValuePOs'. The attribute values of an extensible
     * object.
     *
     * @param anElement the element to check for participation
     * @return true, if the element is part of the relationship, false otherwise
     * @generated
     */
    public boolean isInAttributeValues(AttributeValue anElement)
    {
        return isInAttributeValuePOs((WarehousePOAttributeValuePO)anElement);
    }

    /**
     * Convenience wrapper that implements the public API relation 'attributeValues'. The implementation just forwards
     * the call to the internal relation implementation 'attributeValuePOs'. The attribute values of an extensible
     * object.
     *
     * @return the number of elements participating in the relation
     * @generated
     */
    public int getAttributeValuesCount()
    {
        return getAttributeValuePOsCount();
    }

    /**
     * Convenience wrapper that implements the public API relation 'attributeValues'. The implementation just forwards
     * the call to the internal relation implementation 'attributeValuePOs'. The attribute values of an extensible
     * object.
     *
     * @return the iterator with the elements of the relation
     * @generated
     */
    @SuppressWarnings("unchecked")
    public Iterator<AttributeValue> createAttributeValuesIterator()
    {
        return (Iterator)createAttributeValuePOsIterator();
    }

}
